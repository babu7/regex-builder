// Generated by CoffeeScript 1.6.3
/*

Regex Builder

Sep 2013 ys
*/


(function() {
  var $cur_exp, $exp, $flag, $match, $txt, anchor, anchor_c, create_match_list, delay_id, delay_run_match, entityMap, escape_exp, escape_html, init, init_bind, init_key_events, load_data, match_elem_show_tip, override_return, run_match, save_data, select_all_text;

  $exp = $('#exp');

  $cur_exp = $('#cur_exp');

  $txt = $('#txt');

  $match = $('#match');

  $flag = $('#flag');

  init = function() {
    load_data();
    $(window).on('beforeunload', save_data);
    run_match();
    init_key_events();
    init_bind();
    $('[title]').tooltip();
    return setTimeout(function() {
      return $exp.select();
    }, 500);
  };

  init_key_events = function() {
    $txt.keydown(override_return);
    $txt.keyup(delay_run_match);
    $exp.keyup(delay_run_match);
    $flag.keyup(delay_run_match);
    $cur_exp.click(select_all_text);
    return $('.switch_hide').click(function() {
      var $tar, $this;
      $this = $(this);
      $tar = $('#' + $this.attr('target'));
      if ($this.prop('checked')) {
        return $tar.hide();
      } else {
        return $tar.show();
      }
    });
  };

  init_bind = function() {
    return $('[bind]').each(function() {
      var $this;
      $this = $(this);
      return $this.change(function() {
        return window[$this.attr('bind')] = $this.val();
      });
    });
  };

  delay_id = null;

  delay_run_match = function() {
    var elem;
    elem = this;
    clearTimeout(delay_id);
    return delay_id = setTimeout(function() {
      var saved_sel;
      if (elem.id === 'txt') {
        saved_sel = saveSelection(elem);
      }
      run_match();
      if (elem.id === 'txt') {
        return restoreSelection(elem, saved_sel);
      }
    }, window.exe_delay);
  };

  anchor_c = 0;

  anchor = function(index) {
    var c;
    c = anchor_c++ % 4;
    switch (c) {
      case 0:
        return "<i index='" + index + "'>";
      case 1:
        return "</i>";
      case 2:
        return "<b index='" + index + "'>";
      case 3:
        return "</b>";
    }
  };

  entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;"
  };

  escape_exp = /[&<>]/g;

  escape_html = function(str) {
    return String(str).replace(escape_exp, function(s) {
      return entityMap[s];
    });
  };

  select_all_text = function() {
    var range;
    if (document.selection) {
      range = document.body.createTextRange();
      range.moveToElementText(this);
      return range.select();
    } else if (window.getSelection) {
      range = document.createRange();
      range.selectNode(this);
      return window.getSelection().addRange(range);
    }
  };

  override_return = function(e) {
    if (e.keyCode === 13) {
      document.execCommand('insertHTML', false, '\n');
      return false;
    }
  };

  run_match = function() {
    var count, cur_exp, e, exp, flag, i, j, json, k, list, m, ms, r, txt, visual;
    exp = $exp.val();
    flag = $flag.val();
    txt = $txt.text();
    if (!exp) {
      $match.text('');
      $cur_exp.html('');
      return;
    }
    try {
      r = new RegExp(exp, flag);
    } catch (_error) {
      e = _error;
      $match.text(e);
      return;
    }
    cur_exp = r.source;
    cur_exp = cur_exp.replace(/\\\//g, '/').replace(/\//g, '\\/');
    cur_exp = RegexColorizer.colorizeText(cur_exp);
    $cur_exp.html('/' + cur_exp + '/' + flag);
    ms = [];
    visual = '';
    count = 0;
    if (r.global) {
      i = 0;
      while ((m = r.exec(txt)) !== null) {
        ms.push(m[0]);
        k = r.lastIndex;
        j = k - m[0].length;
        visual += escape_html(txt.slice(i, j)) + anchor(count++);
        visual += txt.slice(j, k) + anchor();
        i = k;
        if (m[0].length === 0) {
          r.lastIndex++;
        }
      }
      visual += escape_html(txt.slice(i));
    } else {
      visual = txt.replace(r, function(m) {
        ms.push(m);
        return m = anchor(count) + m + anchor();
      });
    }
    $txt.empty().html(visual);
    $txt.find('[index]').hover(match_elem_show_tip, function() {
      return $(this).popover('destroy');
    });
    list = create_match_list(ms);
    json = JSON.stringify(ms);
    list += "<pre>" + json + "</pre>";
    return $match.html(list);
  };

  create_match_list = function(m) {
    var i, list, _i, _len;
    list = '<ol start="0">';
    if (m) {
      for (_i = 0, _len = m.length; _i < _len; _i++) {
        i = m[_i];
        list += "<li>" + i + "</li>";
      }
    }
    list += '</ol>';
    return list;
  };

  match_elem_show_tip = function() {
    var $this, index, m, reg;
    $this = $(this);
    index = $this.attr('index');
    reg = new RegExp($exp.val(), $flag.val().replace('g', ''));
    m = $this.text().match(reg);
    return $this.popover({
      html: true,
      title: 'Group: ' + index,
      content: create_match_list(m),
      placement: 'bottom'
    }).popover('show');
  };

  save_data = function() {
    $('[save]').each(function() {
      var $this, val;
      $this = $(this);
      val = $this[$this.attr('save')]();
      return localStorage.setItem($this.attr('id'), val);
    });
    return null;
  };

  load_data = function() {
    return $('[save]').each(function() {
      var $this, v;
      $this = $(this);
      v = localStorage.getItem($this.attr('id'));
      if (v !== null) {
        return $this[$this.attr('save')](v);
      }
    });
  };

  
if (window.getSelection && document.createRange) {
    saveSelection = function(containerEl) {
        var range = window.getSelection().getRangeAt(0);
        var preSelectionRange = range.cloneRange();
        preSelectionRange.selectNodeContents(containerEl);
        preSelectionRange.setEnd(range.startContainer, range.startOffset);
        var start = preSelectionRange.toString().length;

        return {
            start: start,
            end: start + range.toString().length
        }
    };

    restoreSelection = function(containerEl, savedSel) {
    	if (!savedSel) return;
        var charIndex = 0, range = document.createRange();
        range.setStart(containerEl, 0);
        range.collapse(true);
        var nodeStack = [containerEl], node, foundStart = false, stop = false;

        while (!stop && (node = nodeStack.pop())) {
            if (node.nodeType == 3) {
                var nextCharIndex = charIndex + node.length;
                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {
                    range.setStart(node, savedSel.start - charIndex);
                    foundStart = true;
                }
                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {
                    range.setEnd(node, savedSel.end - charIndex);
                    stop = true;
                }
                charIndex = nextCharIndex;
            } else {
                var i = node.childNodes.length;
                while (i--) {
                    nodeStack.push(node.childNodes[i]);
                }
            }
        }

        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }
} else if (document.selection && document.body.createTextRange) {
    saveSelection = function(containerEl) {
        var selectedTextRange = document.selection.createRange();
        var preSelectionTextRange = document.body.createTextRange();
        preSelectionTextRange.moveToElementText(containerEl);
        preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
        var start = preSelectionTextRange.text.length;

        return {
            start: start,
            end: start + selectedTextRange.text.length
        }
    };

    restoreSelection = function(containerEl, savedSel) {
        var textRange = document.body.createTextRange();
        textRange.moveToElementText(containerEl);
        textRange.collapse(true);
        textRange.moveEnd("character", savedSel.end);
        textRange.moveStart("character", savedSel.start);
        textRange.select();
    };
}
;

  init();

}).call(this);
