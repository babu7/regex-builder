// Generated by CoffeeScript 1.6.3
var $cur_exp, $exp, $flag, $input, $match, anchor, anchor_c, delay, delay_id, delay_run_match, entityMap, escape_exp, escape_html, init, restoreSelection, run_match, saveSelection, savedSelection;

$exp = $('#exp');

$cur_exp = $('#cur_exp');

$match = $('#match');

$input = $('#input');

$flag = $('#flag');

saveSelection = restoreSelection = savedSelection = null;

init = function() {
  $input.keypress(run_match);
  $exp.keypress(run_match);
  $flag.keypress(run_match);
  $('[save]').each(function() {
    var $this, v;
    $this = $(this);
    v = localStorage.getItem($this.attr('id'));
    if (v) {
      return $this[$this.attr('save')](v);
    }
  });
  delay_run_match();
  return $('[title]').tooltip();
};

delay = $('#exe_delay').change(function() {
  return delay = $(this).val();
}).val();

$('.switch_hide').click(function() {
  var $tar, $this;
  $this = $(this);
  $tar = $('#' + $this.attr('target'));
  if ($this.prop('checked')) {
    return $tar.hide();
  } else {
    return $tar.show();
  }
});

$input.keydown(function(e) {
  var n, node, range, sel;
  sel = window.getSelection();
  if (e.keyCode === 13) {
    if (sel) {
      range = sel.getRangeAt(0);
      node = document.createTextNode('\n');
      n = document.createTextNode('');
      range.deleteContents();
      range.collapse(false);
      range.insertNode(n);
      range.insertNode(node);
      range.selectNodeContents(n);
      sel.removeAllRanges();
      sel.addRange(range);
      savedSelection = saveSelection($input[0]);
      return false;
    }
    e.preventDefault();
  }
  return savedSelection = saveSelection($input[0], 1);
});

delay_id = null;

run_match = function() {
  clearTimeout(delay_id);
  return delay_id = setTimeout(delay_run_match, delay);
};

anchor_c = 0;

anchor = function() {
  var c;
  c = anchor_c++ % 4;
  switch (c) {
    case 0:
      return '<i>';
    case 1:
      return '</i>';
    case 2:
      return '<b>';
    case 3:
      return '</b>';
  }
};

entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;"
};

escape_exp = /[&<>]/g;

escape_html = function(str) {
  return String(str).replace(escape_exp, function(s) {
    return entityMap[s];
  });
};

delay_run_match = function() {
  var e, exp, flag, i, input, j, json, k, m, r, visual;
  exp = $exp.val();
  flag = $flag.val();
  input = $input.text();
  if (!exp) {
    $match.text('');
    $cur_exp.html('');
    return;
  }
  try {
    r = new RegExp(exp, flag);
  } catch (_error) {
    e = _error;
    $match.text(e);
    return;
  }
  $cur_exp.html(RegexColorizer.colorizeText(r.toString()));
  m = input.match(r);
  json = JSON.stringify(m, null, 1);
  $match.text(json);
  visual = '';
  i = 0;
  while ((m = r.exec(input)) !== null) {
    k = r.lastIndex;
    j = k - m[0].length;
    visual += escape_html(input.slice(i, j)) + anchor();
    visual += input.slice(j, k) + anchor();
    i = k;
    if (m[0].length === 0) {
      r.lastIndex++;
    }
    if (!r.global) {
      break;
    }
  }
  visual += escape_html(input.slice(i));
  $input.html(visual);
  return restoreSelection($input[0], savedSelection);
};

window.onbeforeunload = function() {
  $('[save]').each(function() {
    var $this;
    $this = $(this);
    return localStorage.setItem($this.attr('id'), $this[$this.attr('save')]());
  });
  return null;
};


if (window.getSelection && document.createRange) {
    saveSelection = function(containerEl, offset) {
    	if (!offset) offset = 0
        var range = window.getSelection().getRangeAt(0);
        var preSelectionRange = range.cloneRange();
        preSelectionRange.selectNodeContents(containerEl);
        preSelectionRange.setEnd(range.startContainer, range.startOffset);
        var start = preSelectionRange.toString().length;

        return {
            start: start + offset,
            end: start + range.toString().length + offset
        }
    };

    restoreSelection = function(containerEl, savedSel) {
    	if (!savedSel) return;
        var charIndex = 0, range = document.createRange();
        range.setStart(containerEl, 0);
        range.collapse(true);
        var nodeStack = [containerEl], node, foundStart = false, stop = false;

        while (!stop && (node = nodeStack.pop())) {
            if (node.nodeType == 3) {
                var nextCharIndex = charIndex + node.length;
                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {
                    range.setStart(node, savedSel.start - charIndex);
                    foundStart = true;
                }
                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {
                    range.setEnd(node, savedSel.end - charIndex);
                    stop = true;
                }
                charIndex = nextCharIndex;
            } else {
                var i = node.childNodes.length;
                while (i--) {
                    nodeStack.push(node.childNodes[i]);
                }
            }
        }

        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }
} else if (document.selection && document.body.createTextRange) {
    saveSelection = function(containerEl) {
        var selectedTextRange = document.selection.createRange();
        var preSelectionTextRange = document.body.createTextRange();
        preSelectionTextRange.moveToElementText(containerEl);
        preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
        var start = preSelectionTextRange.text.length;

        return {
            start: start,
            end: start + selectedTextRange.text.length
        }
    };

    restoreSelection = function(containerEl, savedSel) {
        var textRange = document.body.createTextRange();
        textRange.moveToElementText(containerEl);
        textRange.collapse(true);
        textRange.moveEnd("character", savedSel.end);
        textRange.moveStart("character", savedSel.start);
        textRange.select();
    };
}
;

init();
